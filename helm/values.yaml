# ---------------------------------------------------------------------
# -- Global values
# ---------------------------------------------------------------------
image:
  repository: burningalchemist/sql_exporter
  pullPolicy: IfNotPresent
  tag: 0.12.3
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceMonitor:
  enabled: true
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
test:
  enabled: true
# ---------------------------------------------------------------------
# -- SQL exporter configuration
# -- For a comprehensive and comprehensively documented configuration
# --  file check out: https://github.com/burningalchemist/sql_exporter/blob/master/documentation/sql_exporter.yml
# ---------------------------------------------------------------------
config:
  global:
    scrape_timeout: 10s
    scrape_timeout_offset: 500ms
    min_interval: 0s
    max_connections: 3
    max_idle_connections: 3
# ---------------------------------------------------------------------
# -- Target and collectors are not set so the chart is more flexible
# -- Please configure it yourself
# ---------------------------------------------------------------------
#  target:
#    data_source_name: 'sqlserver://prom_user:prom_password@dbserver1.example.com:1433'
#    collectors: [active_connections]
#  collectors:
#    - collector_name: active_connections
#      metrics:
#        - metric_name: active_connections
#          type: gauge
#          help: 'Active connections'
#          key_labels:
#            - "datname"
#            - "usename"
#            - "state"
#          values:
#            - "count"
#          query_ref: active_connections
#      queries:
#        - query_name: active_connections
#          query: |
#                  SELECT
#                    datname::text,
#                    usename::text,
#                    state::text,
#                    COUNT(state)::float AS count
#                  FROM pg_stat_activity
#                  GROUP BY datname, usename, state;
#  collector_files:
#    - "*.collector.yml"
# ---------------------------------------------------------------------
# -- Collector Files
# ---------------------------------------------------------------------
# collectorFiles:
#   pricing_data_freshness.collector.yml: 
#     collector_name: pricing_data_freshness
#     metrics:
#       - metric_name: pricing_update_time
#         type: gauge
#         help: 'Time when prices for a market were last updated.'
#         key_labels:
#           # Populated from the `market` column of each row.
#           - Market
#         static_labels:
#           # Arbitrary key/value pair
#           portfolio: income
#         values: [LastUpdateTime]
#         query: |
#           SELECT Market, max(UpdateTime) AS LastUpdateTime
#           FROM MarketPrices
#           GROUP BY Market
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
