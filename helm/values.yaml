# -- Provide a name in place of `sql-exporter`
nameOverride: ""
# -- String to fully override "sql-exporter.fullname"
fullnameOverride: ""

image:
  # -- Image repository
  repository: burningalchemist/sql_exporter
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Image tag
  # @default -- `appVersion` value from `Chart.yaml`
  tag: ""

# -- Secrets with credentials to pull images from a private registry
imagePullSecrets: []

service:
  # -- Service type
  type: ClusterIP
  # -- Service port
  port: 80
  # -- Service labels
  labels: {}
  # -- Service annotations
  annotations:
    {}
    # example of prometheus usage
    # prometheus.io/scrape: "true"
    # prometheus.io/path: "/metrics"

# -- Resource limits and requests for the application controller pods
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Pod labels
podLabels: {}
# -- Pod annotations
podAnnotations: {}

# -- Pod security context
podSecurityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
# @ignored
securityContext: {}

# Prometheus Operator values
serviceMonitor:
  # -- Enable ServiceMonitor
  enabled: true
  # -- ServiceMonitor interval
  interval: 15s
  # -- ServiceMonitor path
  path: /metrics
  # -- ServiceMonitor scrape timeout
  # scrapeTimeout: 10s
  metricRelabelings: {}

# Additional env variables
# - kind should be either Secret or ConfigMap
# - name is the name of the Secret or ConfigMap that should be used
# - key is the key of the object inside of a Secret or ConfigMap
# env:
#   SQLEXPORTER_TARGET_DSN:
#     from:
#       kind: Secret
#       name: sql_exporter_secret
#       key: CONNECTION_STRING
config:
  global:
    # -- Scrape timeout
    scrape_timeout: 10s
    # -- Scrape timeout offset. Must be strictly positive.
    scrape_timeout_offset: 500ms
    # -- Minimum interval between collector runs.
    min_interval: 0s
    # -- Number of open connections.
    max_connections: 3
    # -- Number of idle connections.
    max_idle_connections: 3
# Target and collectors are not set so the chart is more flexible. Please configure it yourself.
# target:
#   data_source_name: 'sqlserver://prom_user:prom_password@dbserver1.example.com:1433'
#   collectors: [active_connections]
# collectors:
#   - collector_name: active_connections
#     metrics:
#       - metric_name: active_connections
#         type: gauge
#         help: 'Active connections'
#         key_labels:
#           - "datname"
#           - "usename"
#           - "state"
#         values:
#           - "count"
#         query_ref: active_connections
#     queries:
#       - query_name: active_connections
#         query: |
#                 SELECT
#                   datname::text,
#                   usename::text,
#                   state::text,
#                   COUNT(state)::float AS count
#                 FROM pg_stat_activity
#                 GROUP BY datname, usename, state;
# collector_files:
#    - "*.collector.yml"

# ---------------------------------------------------------------------
# -- Collector Files
# ---------------------------------------------------------------------
# -- Collector files are mounted to /etc/sql_exporter/collectors dir
# ---------------------------------------------------------------------
# collectorFiles:
#   pricing_data_freshness.collector.yml:
#     collector_name: pricing_data_freshness
#     metrics:
#       - metric_name: pricing_update_time
#         type: gauge
#         help: 'Time when prices for a market were last updated.'
#         key_labels:
#           # Populated from the `market` column of each row.
#           - Market
#         static_labels:
#           # Arbitrary key/value pair
#           portfolio: income
#         values: [LastUpdateTime]
#         query: |
#           SELECT Market, max(UpdateTime) AS LastUpdateTime
#           FROM MarketPrices
#           GROUP BY Market
